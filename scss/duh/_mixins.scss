@mixin between-num($sizeSmaller, $sizeBigger) {
	@media only screen and (min-width: #{$sizeSmaller}px) and (max-width: #{$sizeBigger}px) { @content; }
}

@mixin above-num($size) {
	@media only screen and (min-width: #{$size}px) { @content; }
}

@mixin below-num($size) {
	@media only screen and (max-width: #{$size}px) { @content; }
}

@mixin and-above($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	@media only screen and (min-width: #{$size}px) { @content; }
}

@mixin and-below($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	$keys: map-keys($breakpoints);
	$index: index($keys, $breakpoint);

	@if $index < length($breakpoints) {
		$nextSizeUp: nth(map-get($breakpoints, nth($keys, $index+1)), 1);
		@media only screen and (max-width: #{$nextSizeUp}px) { @content; }
	} @else {
		@media only screen and (min-width: 0px) { @content; }
	}
}

@mixin only($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	$keys: map-keys($breakpoints);
	$index: index($keys, $breakpoint);

	@if $index < length($breakpoints) {
		$nextSizeUp: nth(map-get($breakpoints, nth($keys, $index+1)), 1);
		@media only screen and (min-width: #{$size}px) and (max-width: #{($nextSizeUp)-1}px) { @content; }
	} @else {
		@media only screen and (min-width: #{$size}px) { @content; }
	}
}

$allSizes: () !global;

@mixin all-sizes-queue($name, $ruleValueMap) {
 	$allSizes: append($allSizes, ($name, $ruleValueMap), comma) !global;
}

@mixin generate-all-sizes-queue() {
	@each $breakpoint, $size in $breakpoints {
		@include and-above($breakpoint) {
			@for $i from 1 through length($allSizes) {
				$name: nth(nth($allSizes, $i), 1);
				$ruleValueMap: nth(nth($allSizes, $i), 2);

				.#{$name}-#{$breakpoint} { 

					@each $rule, $value in $ruleValueMap {
						#{$rule}: $value; 
					}
				}
			}
		}
		@include only($breakpoint) {
			@for $i from 1 through length($allSizes) {
				$name: nth(nth($allSizes, $i), 1);
				$ruleValueMap: nth(nth($allSizes, $i), 2);

				.#{$name}-#{$breakpoint}-only { 

					@each $rule, $value in $ruleValueMap {
						#{$rule}: $value; 
					}
				}
			}
		}
	}
	$allSizes: () !global;
}

@mixin all-sizes($name) {
	@each $breakpoint, $size in $breakpoints {
		@include and-above($breakpoint) {
			.#{$name}-#{$breakpoint} { @content }
		}
		@include only($breakpoint) {
			.#{$name}-#{$breakpoint}-only { @content }
		}
	}
}