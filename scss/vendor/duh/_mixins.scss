@mixin between-num($sizeSmaller, $sizeBigger) {
	@media only screen and (min-width: #{$sizeSmaller}px) and (max-width: #{$sizeBigger}px) { @content; }
}

@mixin above-num($size) {
	@media only screen and (min-width: #{$size}px) { @content; }
}

@mixin below-num($size) {
	@media only screen and (max-width: #{$size}px) { @content; }
}

@mixin and-above($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	@media only screen and (min-width: #{$size}px) { @content; }
}

@mixin and-below($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	$keys: map-keys($breakpoints);
	$index: index($keys, $breakpoint);

	@if $index < length($breakpoints) {
		$nextSizeUp: nth(map-get($breakpoints, nth($keys, $index+1)), 1);
		@media only screen and (max-width: #{$nextSizeUp}px) { @content; }
	} @else {
		@media only screen and (min-width: 0px) { @content; }
	}
}

@mixin only($breakpoint) {
	$size: nth(map-get($breakpoints, $breakpoint), 1);
	$keys: map-keys($breakpoints);
	$index: index($keys, $breakpoint);

	@if $index < length($breakpoints) {
		$nextSizeUp: nth(map-get($breakpoints, nth($keys, $index+1)), 1);
		@media only screen and (min-width: #{$size}px) and (max-width: #{($nextSizeUp)-1}px) { @content; }
	} @else {
		@media only screen and (min-width: #{$size}px) { @content; }
	}
}

$allSizes: () !global;

@mixin all-sizes-queue($name, $ruleValueMap) {
 	$allSizes: append($allSizes, ($name, $ruleValueMap), comma) !global;
}

@mixin generate-all-sizes-queue() {
	@each $breakpoint, $size in $breakpoints {
		@include and-above($breakpoint) {
			@for $i from 1 through length($allSizes) {
				$name: nth(nth($allSizes, $i), 1);
				$ruleValueMap: nth(nth($allSizes, $i), 2);

				.#{$name}-#{$breakpoint} { 

					@each $rule, $value in $ruleValueMap {
						#{$rule}: $value; 
					}
				}
			}
		}
		@include only($breakpoint) {
			@for $i from 1 through length($allSizes) {
				$name: nth(nth($allSizes, $i), 1);
				$ruleValueMap: nth(nth($allSizes, $i), 2);

				.#{$name}-#{$breakpoint}-only { 

					@each $rule, $value in $ruleValueMap {
						#{$rule}: $value; 
					}
				}
			}
		}
	}
	$allSizes: () !global;
}

@mixin all-sizes($name) {
	@each $breakpoint, $size in $breakpoints {
		@include and-above($breakpoint) {
			.#{$name}-#{$breakpoint} { @content }
		}
		@include only($breakpoint) {
			.#{$name}-#{$breakpoint}-only { @content }
		}
	}
}

@mixin clearfix {
	clear: both;

	&:before, &:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin unstyled {
	border: 0;
	outline: 0;
	margin: 0;
	padding: 0;
	color: inherit;
	text-decoration: none;
	background: none;
}

@mixin vendor-prefix($name, $argument) {
	#{$name}: $argument;
	-webkit-#{$name}: $argument;
	-ms-#{$name}: $argument;
	-moz-#{$name}: $argument;
	-o-#{$name}: $argument;
}

$fonts: () !global;

@mixin font-import($name, $path, $options) {
	$weight: map-get($options, 'weight');
	$style: map-get($options, 'style');
	$family: map-get($options, 'family');

	@font-face {
		font-family: $name;
		src: url($path+".eot");
		src: url($path+".eot?#iefix") format("embedded-opentype"),
			 url($path+".woff") format("woff"),
		     url($path+".ttf") format("truetype"),
		     url($path+".svg#"+$name) format("svg");
		@if $weight  { font-weight: #{$weight};   }@else{ font-weight: normal; }
		@if $style   { font-style: #{$style};     }@else{ font-style: normal; }
	}

	$fonts: map-merge($fonts, ($name: $options)) !global;
}

@mixin font($name) {
	$options: map-get($fonts, $name);
	$weight: map-get($options, 'weight');
	$style: map-get($options, 'style');
	$family: map-get($options, 'family');

	@if $family { font-family: "#{$name}", #{$family}; }@else{ font-family: "#{$name}"; }
	@if $weight { font-weight: #{$weight};             }@else{ font-weight: normal; }
	@if $style  { font-style: #{$style};               }@else{ font-style: normal; }
}

@mixin rotate( $degrees ) {
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);

  filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
 }